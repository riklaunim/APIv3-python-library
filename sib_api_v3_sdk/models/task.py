# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |   # noqa: E501

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_contact': 'Contact',
        'id': 'str',
        'task_type_id': 'str',
        'name': 'str',
        'contacts_ids': 'list[int]',
        'contacts': 'list[Contact]',
        'deals_ids': 'list[str]',
        'companies_ids': 'list[str]',
        'assign_to_id': 'str',
        '_date': 'datetime',
        'duration': 'int',
        'notes': 'str',
        'done': 'bool',
        'reminder': 'TaskReminder',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'refs': 'object'
    }

    attribute_map = {
        'first_contact': 'firstContact',
        'id': 'id',
        'task_type_id': 'taskTypeId',
        'name': 'name',
        'contacts_ids': 'contactsIds',
        'contacts': 'contacts',
        'deals_ids': 'dealsIds',
        'companies_ids': 'companiesIds',
        'assign_to_id': 'assignToId',
        '_date': 'date',
        'duration': 'duration',
        'notes': 'notes',
        'done': 'done',
        'reminder': 'reminder',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'refs': 'refs'
    }

    def __init__(self, first_contact=None, id=None, task_type_id=None, name=None, contacts_ids=None, contacts=None, deals_ids=None, companies_ids=None, assign_to_id=None, _date=None, duration=None, notes=None, done=None, reminder=None, created_at=None, updated_at=None, refs=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501

        self._first_contact = None
        self._id = None
        self._task_type_id = None
        self._name = None
        self._contacts_ids = None
        self._contacts = None
        self._deals_ids = None
        self._companies_ids = None
        self._assign_to_id = None
        self.__date = None
        self._duration = None
        self._notes = None
        self._done = None
        self._reminder = None
        self._created_at = None
        self._updated_at = None
        self._refs = None
        self.discriminator = None

        if first_contact is not None:
            self.first_contact = first_contact
        if id is not None:
            self.id = id
        self.task_type_id = task_type_id
        self.name = name
        if contacts_ids is not None:
            self.contacts_ids = contacts_ids
        if contacts is not None:
            self.contacts = contacts
        if deals_ids is not None:
            self.deals_ids = deals_ids
        if companies_ids is not None:
            self.companies_ids = companies_ids
        if assign_to_id is not None:
            self.assign_to_id = assign_to_id
        self._date = _date
        if duration is not None:
            self.duration = duration
        if notes is not None:
            self.notes = notes
        if done is not None:
            self.done = done
        if reminder is not None:
            self.reminder = reminder
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if refs is not None:
            self.refs = refs

    @property
    def first_contact(self):
        """Gets the first_contact of this Task.  # noqa: E501


        :return: The first_contact of this Task.  # noqa: E501
        :rtype: Contact
        """
        return self._first_contact

    @first_contact.setter
    def first_contact(self, first_contact):
        """Sets the first_contact of this Task.


        :param first_contact: The first_contact of this Task.  # noqa: E501
        :type: Contact
        """

        self._first_contact = first_contact

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        Unique task id  # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        Unique task id  # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def task_type_id(self):
        """Gets the task_type_id of this Task.  # noqa: E501

        Id for type of task e.g Call / Email / Meeting etc.  # noqa: E501

        :return: The task_type_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._task_type_id

    @task_type_id.setter
    def task_type_id(self, task_type_id):
        """Sets the task_type_id of this Task.

        Id for type of task e.g Call / Email / Meeting etc.  # noqa: E501

        :param task_type_id: The task_type_id of this Task.  # noqa: E501
        :type: str
        """
        if task_type_id is None:
            raise ValueError("Invalid value for `task_type_id`, must not be `None`")  # noqa: E501

        self._task_type_id = task_type_id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501

        Name of task  # noqa: E501

        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        Name of task  # noqa: E501

        :param name: The name of this Task.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def contacts_ids(self):
        """Gets the contacts_ids of this Task.  # noqa: E501

        Contact ids for contacts linked to this task  # noqa: E501

        :return: The contacts_ids of this Task.  # noqa: E501
        :rtype: list[int]
        """
        return self._contacts_ids

    @contacts_ids.setter
    def contacts_ids(self, contacts_ids):
        """Sets the contacts_ids of this Task.

        Contact ids for contacts linked to this task  # noqa: E501

        :param contacts_ids: The contacts_ids of this Task.  # noqa: E501
        :type: list[int]
        """

        self._contacts_ids = contacts_ids

    @property
    def contacts(self):
        """Gets the contacts of this Task.  # noqa: E501

        Contact details for contacts linked to this task  # noqa: E501

        :return: The contacts of this Task.  # noqa: E501
        :rtype: list[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Task.

        Contact details for contacts linked to this task  # noqa: E501

        :param contacts: The contacts of this Task.  # noqa: E501
        :type: list[Contact]
        """

        self._contacts = contacts

    @property
    def deals_ids(self):
        """Gets the deals_ids of this Task.  # noqa: E501

        Deal ids for deals a task is linked to  # noqa: E501

        :return: The deals_ids of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._deals_ids

    @deals_ids.setter
    def deals_ids(self, deals_ids):
        """Sets the deals_ids of this Task.

        Deal ids for deals a task is linked to  # noqa: E501

        :param deals_ids: The deals_ids of this Task.  # noqa: E501
        :type: list[str]
        """

        self._deals_ids = deals_ids

    @property
    def companies_ids(self):
        """Gets the companies_ids of this Task.  # noqa: E501

        Companies ids for companies a task is linked to  # noqa: E501

        :return: The companies_ids of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._companies_ids

    @companies_ids.setter
    def companies_ids(self, companies_ids):
        """Sets the companies_ids of this Task.

        Companies ids for companies a task is linked to  # noqa: E501

        :param companies_ids: The companies_ids of this Task.  # noqa: E501
        :type: list[str]
        """

        self._companies_ids = companies_ids

    @property
    def assign_to_id(self):
        """Gets the assign_to_id of this Task.  # noqa: E501

        User id to whom task is assigned  # noqa: E501

        :return: The assign_to_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._assign_to_id

    @assign_to_id.setter
    def assign_to_id(self, assign_to_id):
        """Sets the assign_to_id of this Task.

        User id to whom task is assigned  # noqa: E501

        :param assign_to_id: The assign_to_id of this Task.  # noqa: E501
        :type: str
        """

        self._assign_to_id = assign_to_id

    @property
    def _date(self):
        """Gets the _date of this Task.  # noqa: E501

        Task date/time  # noqa: E501

        :return: The _date of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Task.

        Task date/time  # noqa: E501

        :param _date: The _date of this Task.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def duration(self):
        """Gets the duration of this Task.  # noqa: E501

        Duration of task  # noqa: E501

        :return: The duration of this Task.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Task.

        Duration of task  # noqa: E501

        :param duration: The duration of this Task.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def notes(self):
        """Gets the notes of this Task.  # noqa: E501

        Notes added to a task  # noqa: E501

        :return: The notes of this Task.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Task.

        Notes added to a task  # noqa: E501

        :param notes: The notes of this Task.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def done(self):
        """Gets the done of this Task.  # noqa: E501

        Task marked as done  # noqa: E501

        :return: The done of this Task.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this Task.

        Task marked as done  # noqa: E501

        :param done: The done of this Task.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def reminder(self):
        """Gets the reminder of this Task.  # noqa: E501

        Task reminder date/time for a task  # noqa: E501

        :return: The reminder of this Task.  # noqa: E501
        :rtype: TaskReminder
        """
        return self._reminder

    @reminder.setter
    def reminder(self, reminder):
        """Sets the reminder of this Task.

        Task reminder date/time for a task  # noqa: E501

        :param reminder: The reminder of this Task.  # noqa: E501
        :type: TaskReminder
        """

        self._reminder = reminder

    @property
    def created_at(self):
        """Gets the created_at of this Task.  # noqa: E501

        Task created date/time  # noqa: E501

        :return: The created_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Task.

        Task created date/time  # noqa: E501

        :param created_at: The created_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Task.  # noqa: E501

        Task update date/time  # noqa: E501

        :return: The updated_at of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Task.

        Task update date/time  # noqa: E501

        :param updated_at: The updated_at of this Task.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def refs(self):
        """Gets the refs of this Task.  # noqa: E501


        :return: The refs of this Task.  # noqa: E501
        :rtype: object
        """
        return self._refs

    @refs.setter
    def refs(self, refs):
        """Sets the refs of this Task.


        :param refs: The refs of this Task.  # noqa: E501
        :type: object
        """

        self._refs = refs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
